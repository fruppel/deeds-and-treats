# syntax=docker/dockerfile:1.7

########## Stage 1: Node/Vite Assets
FROM node:20-alpine AS assets
WORKDIR /app
COPY package.json package-lock.json* ./
RUN npm ci
COPY resources/ resources/
COPY vite.config.js tailwind.config.js ./
RUN npm run build

########## Stage 2: Runtime (PHP-FPM 8.3) + Composer
FROM php:8.3-fpm-bookworm AS app
# Systempakete & PHP-Extensions
RUN apt-get update && apt-get install -y \
      git unzip \
      libicu-dev libpng-dev libjpeg-dev libzip-dev libonig-dev \
  && docker-php-ext-configure gd --with-jpeg \
  && docker-php-ext-install -j"$(nproc)" pdo_mysql intl gd zip mbstring opcache \
  && rm -rf /var/lib/apt/lists/*

# Composer ins Runtime-Image kopieren
COPY --from=composer:2 /usr/bin/composer /usr/local/bin/composer
ENV COMPOSER_ALLOW_SUPERUSER=1 COMPOSER_HOME=/composer
ENV APP_ENV=production APP_DEBUG=0

WORKDIR /app

# 1) Composer-Caching: erst nur die Composer-Dateien
COPY composer.json composer.lock ./
RUN composer install \
      --no-dev --prefer-dist --no-interaction --no-progress --optimize-autoloader

# 2) Dann den restlichen Code kopieren
COPY . .

# 3) Gebaute Frontend-Assets Ã¼bernehmen
COPY --from=assets /app/public/build /app/public/build

# 4) Autoloader final optimieren & Laufzeitverzeichnisse anlegen
RUN composer dump-autoload --optimize --no-dev \
 && mkdir -p storage bootstrap/cache \
 && chown -R www-data:www-data storage bootstrap/cache

EXPOSE 9000
CMD ["php-fpm"]
