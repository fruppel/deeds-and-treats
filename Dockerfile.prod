# syntax=docker/dockerfile:1.7

########## Stage 1: Node/Vite Assets
FROM node:20-alpine AS assets
WORKDIR /app
COPY package.json package-lock.json* ./
RUN npm ci
COPY resources/ resources/
COPY vite.config.js tailwind.config.js postcss.config.js ./
RUN npm run build

########## Stage 2: Composer (Dependencies)
FROM composer:2 AS vendor
WORKDIR /app
COPY composer.json composer.lock ./
RUN composer install --no-dev --prefer-dist --no-interaction --no-progress --optimize-autoloader
# App-Code für Classmap/Autoload ergänzen (ohne node_modules, ohne storage)
COPY . .
RUN composer dump-autoload --optimize

########## Stage 3: Runtime (PHP-FPM 8.3)
FROM php:8.3-fpm-bookworm AS runtime

# Systempakete & Extensions
RUN apt-get update && apt-get install -y \
      libicu-dev libpng-dev libjpeg-dev libzip-dev libonig-dev \
  && docker-php-ext-configure gd --with-jpeg \
  && docker-php-ext-install -j"$(nproc)" pdo_mysql intl gd zip mbstring opcache \
  && rm -rf /var/lib/apt/lists/*

# PHP/OPcache Prod-Defaults
RUN { \
  echo "opcache.enable=1"; \
  echo "opcache.enable_cli=0"; \
  echo "opcache.memory_consumption=128"; \
  echo "opcache.interned_strings_buffer=16"; \
  echo "opcache.max_accelerated_files=20000"; \
  echo "opcache.validate_timestamps=0"; \
  echo "opcache.revalidate_freq=0"; \
  echo "cgi.fix_pathinfo=0"; \
} > /usr/local/etc/php/conf.d/zz_prod.ini

WORKDIR /app

# App aus Composer-Stage + gebaute Assets aus Node-Stage
COPY --from=vendor /app /app
COPY --from=assets /app/public/build /app/public/build

# leere, aber vorhandene Verzeichnisse für Laufzeit
RUN mkdir -p storage bootstrap/cache && chown -R www-data:www-data storage bootstrap/cache

EXPOSE 9000
CMD ["php-fpm"]
